#!/bin/bash
#
# WLANderlust

# Handle arguments
while [ -n "$1" ]; do
	PARAM="$1"
	case $PARAM in
		-h|--help)
			cat << EOF
$(basename "$0") [-h] -- The installation script for WLANderlust

where:
    -h | --help         Show this help text
    --security       
    --raspbianupdate    Updates Raspbian
    --settings       
    --rtc               Configures the Real Time Clock
    --gps               Configures the GPS
    --networking        Configure networking
    --usbethernetgadget Configure USB ethernet gadget on Raspberry Pi Zero W and Raspberry Pi 4
    --hostap            Configure host Apccess Point
EOF
			exit
			;;
		--restart)
			rm '.installWLANderlust.state'
			;;
		--update)
			INSTALLATIONSTATE='update'
			;;
		--security)
			INSTALLATIONSTATE='security'
			;;
		--raspbianupdate)
			INSTALLATIONSTATE='raspbianupdate'
			;;
		--settings)
			INSTALLATIONSTATE='settings'
			;;
		--rtc)
			INSTALLATIONSTATE='rtc-i2c'
			;;
		--gps)
			INSTALLATIONSTATE='gps'
			;;
		--networking)
			INSTALLATIONSTATE='networking'
			;;
		--usbethernetgadget)
			INSTALLATIONSTATE='usbethernetgadget'
			;;
		--hostap)
			INSTALLATIONSTATE='hostap'
			;;
	esac
	shift
done

# Check if we are root
if [ "$(id -u)" -ne 0 ]; then
	echo 'You should run this installation script as root!'
	exit 1
fi

# Check if we can write in the current directory to store the installation state
if ! touch '.installWLANderlust.state'; then
	echo 'Unable to write installation state file in current directory'
	exit 1
fi

# Read the instalation state so we can continue where we left
if [ -z "$INSTALLATIONSTATE" ]; then
	INSTALLATIONSTATE=`cat '.installWLANderlust.state'`
fi

# If no installation state is set start from the introduction
if [ -z "$INSTALLATIONSTATE" ]; then
	INSTALLATIONSTATE='introduction'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

# Check if the installation is run from a remote SSH connection
ISREMOTELOGIN=`pstree -ps $$ | grep -q ssh && echo true || echo false`
IPADDRESS=`ifconfig wlan0 | sed -n 's|^.*inet \([0-9.]*\) .*$|\1|p'`

TIMESTAMP=`date '+%Y%m%d%H%M%S'`
backupFile() {
	[ -f "$1" ] && [ ! -f "$1".old$TIMESTAMP ] && cp -p "$1" "$1".old$TIMESTAMP
}

# Introduction
if [ "$INSTALLATIONSTATE" == 'introduction' ]; then
	clear
	echo -n -e '\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Welcome to the installation script of WLANderlust!

This script will configure your freshly installed Raspbian to be a roaming
Access Point with advanced features. Please read the README.md file for more
details.

\e[1mPress Q to quit or any other key to proceed\e[0m '
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit

	INSTALLATIONSTATE='security'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

# Security settings
if [ "$INSTALLATIONSTATE" == 'security' ]; then
	clear
	echo -n -e '\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Security

ToDo

\e[1mPress Q to quit, S to skip or any other key to ToDo\e[0m '
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit

	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		echo

		# https://www.raspberrypi.org/documentation/configuration/security.md

		# Ask for SSH public key
		echo 'It is recommended to use key based authentication for SSH'
		echo 'Your SSH public key, leave empty to keep using a password instead'
		read 'SSHPUBLICKEY'

		#ToDo Validate SSH public key

		if [ -n "$SSHPUBLICKEY" ]; then
			echo
			mkdir -p ~pi/.ssh
			echo "$SSHPUBLICKEY" >> ~pi/.ssh/authorized_keys
			chown -R pi:pi ~pi/.ssh
		elif [ -e /run/sshwarn ]; then
			# Change user pi password
			echo
			echo 'You need to change the default password for user pi'
			passwd pi
		fi

		# Disable password authentication in SSH daemon if authorized_keys are configured
		if [ -s ~pi/.ssh/authorized_keys ]; then
			echo
			echo 'You are using key based authentication for SSH, disabling password based authentication'
			backupFile /etc/ssh/sshd_config
			sed 's|^#\?ChallengeResponseAuthentication .*$|ChallengeResponseAuthentication no|' -i /etc/ssh/sshd_config
			sed 's|^#\?PasswordAuthentication .*$|PasswordAuthentication no|' -i /etc/ssh/sshd_config
			sed 's|^#\?UsePAM .*$|UsePAM no|' -i /etc/ssh/sshd_config
		fi

		echo
		# Just wait a bit to show the result
		sleep 5
	fi

	INSTALLATIONSTATE='raspbianupdate'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

# Raspbian update
if [ "$INSTALLATIONSTATE" == 'raspbianupdate' ]; then
	clear
	echo -n -e '\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Update Raspbian

The first thing that needs to be done is to update all the software packages of
your freshly installed Raspbian to their latest versions.

\e[1mPress Q to quit, S to skip or any other key to update your Raspbian installation\e[0m '
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit

	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		echo
		echo
		locale-gen en_GB.UTF-8

		RASPBIANVERSION=`cat /etc/debian_version`
		# Mark the packages we don't want to update
		grep -q "^9\." <<< "$RASPBIANVERSION" &&
			apt-mark hold raspberrypi-kernel

		# Update Raspbian
		apt-get update
		apt-get -y dist-upgrade

		# Downgrade kernel
		if grep -q "^9\." <<< "$RASPBIANVERSION"; then
			echo
			echo 'Downgrading kernel to 4.14.34'
			rpi-update e37295d7a8f9f28eda5b6af35eb0fd4c9341a3e0
		fi

		echo
		# Just wait a bit to show the result
		sleep 5
	fi

	INSTALLATIONSTATE='settings'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

# General settings
if [ "$INSTALLATIONSTATE" == 'settings' ]; then
	clear
	echo -n -e '\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
General settings

ToDo

\e[1mPress Q to quit, S to skip or any other key to ToDo\e[0m '
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit

	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		echo
		# Change hostname
		if grep -q '^raspberrypi$' /etc/hostname; then
			echo
			echo 'Updating hostname'
			backupFile /etc/hostname
			echo 'wlanderlust.local' > /etc/hostname
			backupFile /etc/hosts
			sed 's|raspberrypi|wlanderlust|g' -i /etc/hosts
		fi

		# Disable swap
		echo 'Disable swap'
		swapoff -a
		dphys-swapfile swapoff
		dphys-swapfile uninstall
		systemctl disable dphys-swapfile.service

		#ToDo Disable HDMI
		echo Disabling HDMI
		if [ ! -f /etc/systemd/system/rpi_no_hdmi.service ]; then
			cat << EOF > /etc/systemd/system/rpi_no_hdmi.service
[Unit]
Description=Disable Raspberry Pi HDMI port

[Service]
Type=oneshot
ExecStart=/usr/bin/tvservice -o
ExecStop=/usr/bin/tvservice -p
RemainAfterExit=yes

[Install]
WantedBy=default.target
EOF
		fi

		#systemctl enable rpi_no_hdmi
		#systemctl start rpi_no_hdmi

		#ToDo Disable audio
		#backupFile /boot/config.txt
		#sed 's|^#\?dtparam=audio=on$|#dtparam=audio=on|' -i /boot/config.txt

		echo
		# Just wait a bit to show the result
		sleep 5
	fi

	INSTALLATIONSTATE='rtc-i2c'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

# Real Time Clock I2C
if [ "$INSTALLATIONSTATE" == 'rtc-i2c' ] && [ -e /dev/i2c-1 ]; then
	I2CDETECT_RESPONSE=`i2cdetect -y 1 0x68 0x68`
	if grep -q ' 68 ' <<< "$I2CDETECT_RESPONSE"; then
		INSTALLATIONSTATE='rtc-driver'
		echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
	elif grep -q ' UU ' <<< "$I2CDETECT_RESPONSE"; then
		INSTALLATIONSTATE='networking'
		echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
	fi
fi

if [ "$INSTALLATIONSTATE" == 'rtc-i2c' ]; then
	clear
	echo -n -e '\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Real Time Clock configuration

ToDo: Describe the Real Time Clock

Configuring your Real Time Clock involves a couple of steps including restarting
your Raspberry Pi a couple of times.

If you have no Real Time Clock installed you can safely skip these steps.

We first need to enable I2C on your Raspberry Pi.

\e[1mPress Q to quit, S to skip or any other key to configure your Real Time Clock\e[0m '
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit
	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		echo 'Installing I2C packages'
		apt-get install -y i2c-tools

		if ! grep -q '^i2c-dev' /etc/modules; then
			echo 'i2c-dev' >> /etc/modules
		fi

		if grep -q '#\?dtparam=i2c_arm=' /boot/config.txt; then
			sed 's|^#\?dtparam=i2c_arm=.*$|dtparam=i2c_arm=on|' -i /boot/config.txt
		fi

		echo
		# Just wait a bit to show the result
		sleep 5

		clear
		echo -n -e '\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Real Time Clock I2C configuration

I2C is now configured. You need to restart your Rasperry Pi and
continue the installation by executing the installation script again. The
script will recognise where it has stopped and continue with the next step.
'
		if $ISREMOTELOGIN; then
			echo -n -e "
Reconnect to your Raspberri Pi using the following command:
 ssh pi@$IPADDRESS
"
		fi
		echo -n -e '
\e[1mPress Q to quit or any other key to restart your device\e[0m '
		read -n 1 -s 'CHOICE'
		([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit

		INSTALLATIONSTATE='rtc-driver'
		echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
		reboot & exit
	fi

	INSTALLATIONSTATE='networking'
	#ToDo INSTALLATIONSTATE='gps'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

if [ "$INSTALLATIONSTATE" == 'rtc-driver' ]; then
	clear
	echo -n -e '\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Real Time Clock driver configuration

ToDo

\e[1mPress Q to quit, S to skip or any other key to configure your Real Time Clock\e[0m '
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit
	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		I2CDETECT_RESPONSE=`i2cdetect -y 1 0x68 0x68`
		# Detect DS1307, DS3231 and PCF85231 RTC Chips
		if grep -q ' 68 ' <<< "$I2CDETECT_RESPONSE"; then
			#ToDo How to detect which device is used?
			#echo 'dtoverlay=i2c-rtc,ds1307' >> /boot/config.txt
			#echo 'dtoverlay=i2c-rtc,pcf8523' >> /boot/config.txt
			echo 'dtoverlay=i2c-rtc,ds3231' >> /boot/config.txt

			echo
			# Just wait a bit to show the result
			sleep 5

			clear
			echo -n -e "\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Real Time Clock driver configuration

Your Real Time Clock driver is now configured. You need to restart your Rasperry Pi and
continue the installation by executing the installation script again. The
script will recognise where it has stopped and continue with the next step.

\e[1mPress Q to quit or any other key to restart your device\e[0m "
			read -n 1 -s 'CHOICE'
			([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit

			INSTALLATIONSTATE='rtc'
			echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
			reboot & exit
		elif grep -q ' UU ' <<< "$I2CDETECT_RESPONSE"; then
			# Driver is already installed
			INSTALLATIONSTATE='rtc'
			echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
		fi
	else
		INSTALLATIONSTATE='networking'
		#ToDo INSTALLATIONSTATE='gps'
		echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
	fi
fi

if [ "$INSTALLATIONSTATE" == 'rtc' ]; then
	clear
	echo -n -e '\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Real Time Clock configuration

ToDo

\e[1mPress Q to quit, S to skip or any other key to configure your Real Time Clock\e[0m '
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit
	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		#ToDo Check if we have a network connection and if the current time is set using NTP
		hwclock -w

		# Disable the fake hardware clock script and enable the RTC script
		update-rc.d -f fake-hwclock disable
		update-rc.d -f hwclock.sh enable

		# Incase we want to remove the fake hardware clock all together
		#apt-get -y remove fake-hwclock
		#update-rc.d -f fake-hwclock remove

		#ToDo Edit /lib/udev/hwclock-set
	fi

	INSTALLATIONSTATE='networking'
	#ToDo INSTALLATIONSTATE='gps'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

# GPS
if [ "$INSTALLATIONSTATE" == 'gps' ]; then
	clear
	echo -n -e '\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
GPS

To be able to detect your USB connected GPS you are advised to disconnect the
device before proceeding.

\e[1mPress Q to quit, S to skip or any other key to configure your GPS\e[0m '
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit
	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		if [ ! -f /usr/sbin/gpsd ]; then
			AVAILABLEGPSDVERSION=`apt-cache policy gpsd | grep "Candidate:" | awk '{ print $2 }'`
			if [ "$(printf '%s\n' "3.19" "$AVAILABLEGPSDVERSION" | sort -V | head -n1)" == "$requiredver" ]; then
				# Use stable packages
				echo 'Installing GPS packages'
				apt-get install -y gpsd gpsd-clients
			else
				# Use testing packages
				if [ ! -f /etc/apt/preferences.d/testing.pref ]; then
					cat  << EOF > /etc/apt/preferences.d/testing.pref
Package: *
Pin: release a=testing
Pin-Priority: 400
EOF
				fi

				if [ ! -f /etc/apt/sources.list.d/testing.list ]; then
					cat  << EOF > /etc/apt/sources.list.d/testing.list
deb http://mirrordirector.raspbian.org/raspbian/ testing main
EOF
				fi

				apt-get update
				apt-get -t testing install -y gpsd gpsd-clients
			fi
		fi

		systemctl stop gpsd.socket
		systemctl stop gpsd
		#systemctl disable gpsd.socket

		echo
		echo
		echo "If you're using an USB connected GPS plugin the device NOW and press any key"
		read
		GPSTTY=`ls -tr /dev/ttyUSB* /dev/ttyACM* 2> /dev/null | tail -n 1`
		if [ -n "$GPSTTY" ]; then
			echo "Your GPS device is connected to $GPSTTY"
			_UDEVINFO=`udevadm info -a -p $(udevadm info -q path -n "$GPSTTY")`
			GPSTTYPRODUCTID=`sed -n 's/^.*ATTRS{idProduct}=="\([^"]*\)"$/\1/p' <<< "$_UDEVINFO" | head -n 1`
			GPSTTYVENDORID=`sed -n 's/^.*ATTRS{idVendor}=="\([^"]*\)"$/\1/p' <<< "$_UDEVINFO" | head -n 1`

			if ! grep "\"$GPSTTYVENDORID\".*\"$GPSTTYPRODUCTID\"" /etc/udev/rules.d/61-gpsd.rules; then
				echo "ACTION==\"add\", KKERNEL==\"ttyUSB?\", ATTRS{idVendor}==\"$GPSTTYVENDORID\", ATTRS{idProduct}==\"$GPSTTYPRODUCTID\", OWNER=\"gpsd\", GROUP=\"tty\", SYMLINK+=\"gps%n\", TAG+=\"systemd\", ENV{SYSTEMD_WANTS}=\"gpsdctl@%k.service\"" >> /etc/udev/rules.d/61-gpsd.rules
			else
				echo "Device already configured"
			fi
		fi

		GPSDEVICES=""
		for GPSDEVICE in `ls /dev/gps*`; do
			GPSDEVICES="$GPSDEVICES,$GPSDEVICE"
		done

		if [ -n "$GPSDEVICES" ]; then
			backupFile /etc/default/gpsd
			sed "s|^DEVICES=.*$|DEVICES=\"$GPSDEVICES\"|" -i /etc/default/gpsd
		fi

		echo

		systemctl start gpsd

		# Just wait a bit to show the result
		sleep 5
	fi

	INSTALLATIONSTATE='networking'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

# Networking
if [ "$INSTALLATIONSTATE" == 'networking' ]; then
	clear
	echo -n -e "\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Network configuration

ToDo

\e[1mPress Q to quit, or any other key to configure networking\e[0m "
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit

	if [ ! -e /etc/udev/rules.d/72-network.rules ]; then
		cat  << EOF > /etc/udev/rules.d/72-network.rules
ACTION=="add", SUBSYSTEM=="net", SUBSYSTEMS=="sdio", KERNELS=="mmc1:0001:1", DRIVER!="brcmfmac", NAME="wlan0"
ACTION=="add", SUBSYSTEM=="net", SUBSYSTEMS=="usb",  KERNELS=="1-1.2",       NAME="wlan1"
ACTION=="add", SUBSYSTEM=="net", SUBSYSTEMS=="usb",  KERNELS=="1-1.3",       NAME="wlan2"
ACTION=="add", SUBSYSTEM=="net", SUBSYSTEMS=="usb",  KERNELS=="1-1.4",       NAME="wlan3"
ACTION=="add", SUBSYSTEM=="net", SUBSYSTEMS=="usb",  KERNELS=="1-1.5",       NAME="wlan4"
EOF
		udevadm control --reload-rules
		udevadm trigger --attr-match=subsystem=net
	fi

	if [ ! -f /usr/sbin/dnsmasq ]; then
		echo
		echo 'Installing required networking packages'
		apt-get install -y dnsmasq
		systemctl stop dnsmasq
	fi

	echo
	echo 'Disable ipv4 link-local aka zeroconf, bonjour or APIPA'
	if ! grep -q "^noipv4ll" /etc/dhcpcd.conf; then
		backupFile /etc/dhcpcd.conf
		echo -e "\nnoipv4ll" >> /etc/dhcpcd.conf
	fi

	# Just wait a bit to show the result
	sleep 5
	INSTALLATIONSTATE='usbethernetgadget'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

# Configure USB Ethernet Gadget mode on Raspberry Pi Zero, Zero W and 4
if [ "$INSTALLATIONSTATE" == 'usbethernetgadget' ]; then
	# A space separated list of USB Gadget compatible Raspberry Pi board revisions
	usbGadgetCompatibleRevisions=" 900092 900093 920093 9000c1 a03111 b03111 c03111 "
	piRevision=`awk '/^Revision\t: / {sub("^1000", "", $3); print $3}' /proc/cpuinfo`
	if grep -q " $piRevision " <<< "$usbGadgetCompatibleRevisions"; then
		clear
		echo -n -e "\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
USB Ethernet Gadget configuration

ToDo

\e[1mPress Q to quit, S to skip or any other key to configure the USB Ethernet Gadget\e[0m "
		read -n 1 -s 'CHOICE'
		([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit

		if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
			if grep -q '#\?dtoverlay=dwc2' /boot/config.txt; then
				sed 's|^#\?dtoverlay=dwc2$|dtoverlay=dwc2|' -i /boot/config.txt
			else
				echo "dtoverlay=dwc2" >> /boot/config.txt
			fi

			#if ! grep -q '^dwc2' /etc/modules; then
			#	echo dwc2 >> /etc/modules
			#fi
			#if ! grep -q '^g_ether' /etc/modules; then
			#	echo g_ether >> /etc/modules
			#fi

			USBGADGETINTERFACE="usb0"
			if [ -f /etc/modprobe.d/g_ether.conf ]; then
				USBGADGETMACADDRESS=`sed 's|^.* dev_addr=\([0-9a-fA-F:]*\).*$|\1|' /etc/modprobe.d/g_ether.conf`
				USBGADGETHOSTMACADDRESS=`sed 's|^.* host_addr=\([0-9a-fA-F:]*\).*$|\1|' /etc/modprobe.d/g_ether.conf`
			else
				_RANDOMMAC=`hexdump -n4 -e '/1 "%02x:"' /dev/random`
				USBGADGETMACADDRESS="00:${_RANDOMMAC}01"
				USBGADGETHOSTMACADDRESS="00:${_RANDOMMAC}02"
			fi
			if [ -f "/etc/network/interfaces.d/$USBGADGETINTERFACE" ]; then
				USBGADGETIPADDRESS=`sed -n 's|^\s*address\s*\(\S*\).*$|\1|p' "/etc/network/interfaces.d/$USBGADGETINTERFACE"`
				USBGADGETNETMASK=`sed -n 's|^\s*netmask\s*\(\S*\).*$|\1|p' "/etc/network/interfaces.d/$USBGADGETINTERFACE"`
				USBGADGETNETWORK=`sed -n 's|^\s*network\s*\(\S*\).*$|\1|p' "/etc/network/interfaces.d/$USBGADGETINTERFACE"`
				USBGADGETBROADCAST=`sed -n 's|^\s*broadcast\s*\(\S*\).*$|\1|p' "/etc/network/interfaces.d/$USBGADGETINTERFACE"`
				USBGADGETNETWORKOCTET=`sed -n 's|^[0-9]*\.[0-9]*\.\([0-9]*\)\.[0-9]*$|\1|p' <<< "$USBGADGETIPADDRESS"`
			else
				# We take a number between 128 and 254 to create an IP range for the accesspoint
				USBGADGETNETWORKOCTET=`shuf -i 128-254 -n 1`
				USBGADGETIPADDRESS="192.168.$USBGADGETNETWORKOCTET.1"
				USBGADGETNETMASK='255.255.255.252'
				USBGADGETNETWORK="192.168.$USBGADGETNETWORKOCTET.0"
				USBGADGETBROADCAST="192.168.$USBGADGETNETWORKOCTET.3"
			fi

			echo -n -e "
USB Ethernet Gadget configuration summary
Interface: $USBGADGETINTERFACE
MAC Address: $USBGADGETMACADDRESS
IP Address: $USBGADGETIPADDRESS
Netmask: $USBGADGETNETMASK
Broadcast: $USBGADGETBROADCAST
\e[1mPress Q to quit, S to skip or any other key to use these settings\e[0m "
			read -n 1 -s 'CHOICE'
			([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit
		fi

		if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
			if [ ! -f /etc/modprobe.d/g_ether.conf ]; then
				echo "options g_ether host_addr=$USBGADGETHOSTMACADDRESS dev_addr=$USBGADGETMACADDRESS" > /etc/modprobe.d/g_ether.conf
			fi

			echo
			echo 'Configuring USB Ethernet Gadget...'
			# Configure /etc/network/interfaces.d/USBGADGETINTERFACE
			if [ ! -f "/etc/network/interfaces.d/$USBGADGETINTERFACE" ]; then
				cat << EOF > "/etc/network/interfaces.d/$USBGADGETINTERFACE"
allow-hotplug $USBGADGETINTERFACE
iface $USBGADGETINTERFACE inet static
	address $USBGADGETIPADDRESS
	netmask $USBGADGETNETMASK
	network $USBGADGETNETWORK
	broadcast $USBGADGETBROADCAST
EOF
			fi

			# Configure /etc/dhcpcd.conf
			if ! grep -q "^interface $USBGADGETINTERFACE" /etc/dhcpcd.conf && ! grep -q "^denyinterfaces $USBGADGETINTERFACE" /etc/dhcpcd.conf; then
				backupFile /etc/dhcpcd.conf
				echo -e "\ndenyinterfaces $USBGADGETINTERFACE" >> /etc/dhcpcd.conf
			fi

			if ! grep -q "^$USBGADGETIPADDRESS\s" /etc/hosts; then
				backupFile /etc/hosts
				echo "$USBGADGETIPADDRESS	wlanderlust.local" >> /etc/hosts
			fi

			# dnsmasq
			if ! grep -q "^interface=$USBGADGETINTERFACE" /etc/dnsmasq.conf; then
				backupFile /etc/dnsmasq.conf
				cat << EOF >> /etc/dnsmasq.conf

interface=$USBGADGETINTERFACE
  dhcp-range=192.168.$USBGADGETNETWORKOCTET.2,192.168.$USBGADGETNETWORKOCTET.2,255.255.255.252,2m
EOF
				systemctl restart dnsmasq

				echo
			fi

			# /etc/avahi/avahi-daemon.conf 
			if grep -q "^#allow-interfaces=" /etc/avahi/avahi-daemon.conf; then
				backupFile /etc/avahi/avahi-daemon.conf
				sed "s|^#\?allow-interfaces=.*$|allow-interfaces=$USBGADGETINTERFACE|g" -i /etc/avahi/avahi-daemon.conf
			elif ! grep -q "^allow-interfaces=.*$HOSTAPINTERFACE.*" /etc/avahi/avahi-daemon.conf; then
				backupFile /etc/avahi/avahi-daemon.conf
				sed "s|^allow-interfaces=\(.*\)$|allow-interfaces=\1, $USBGADGETINTERFACE|g" -i /etc/avahi/avahi-daemon.conf
			fi
			systemctl restart avahi-daemon

			clear
			echo -n -e "\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
USB Ethernet Gadget configuration

Your USB Ethernet Gadget is now configured. You need to plug a micro-USB cable
from your computer to your Rasperry Pi and continue the installation by executing
the installation script again. The script will recognise where it has stopped and
continue with the next step.

Don't forget to plug in the USB cable from your computer to the "USB" connector
port on the Pi Zero, not the PWR connector.

Reconnect to your WLANderlust Access Point using the following credentials:
URL: pi@wlanderlust.local or pi@$USBGADGETIPADDRESS
\e[1mPress Q to quit or any other key to restart your device\e[0m "
			read -n 1 -s 'CHOICE'
			([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit

			INSTALLATIONSTATE='hostap'
			echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
			reboot & exit
		fi
	fi

	INSTALLATIONSTATE='hostap'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

# Host Access Point Configuration
# I basically automated these instructions: https://www.raspberrypi.org/documentation/configuration/wireless/access-point.md
if [ "$INSTALLATIONSTATE" == 'hostap' ]; then
	clear
	echo -n -e "\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Host Access Point configuration

We're now going to configure your device as an Access Point, so you can
connect to it and continue the installation of WLANderlust from there.

We're going to detect the WiFi interface you want to use for the Access Point,
to make this possible it's easiest to remove the WiFi interfaces you don't want
to be configured as an Access Point now.

\e[1mPress Q to quit, S to skip or any other key to configure the Host Access Point\e[0m "
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit

	#HOSTAPMETHOD='hostapd'
	HOSTAPMETHOD='wpa_supplicant'
	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		if [ -s /etc/hostapd/hostapd.conf ]; then
			# Read the current Host AP configuration
			HOSTAPDCONF=`cat /etc/hostapd/hostapd.conf`
			HOSTAPINTERFACE=`sed -n 's|^interface=\(.*\)$|\1|p' <<< "$HOSTAPDCONF"`
			HOSTAPSSID=`sed -n 's|^ssid=\(.*\)$|\1|p' <<< "$HOSTAPDCONF"`
			HOSTAPPASSPHRASE=`sed -n 's|^wpa_passphrase=\(.*\)$|\1|p' <<< "$HOSTAPDCONF"`
			HOSTAPMETHOD='hostapd'
		else
			# Generate a somewhat unique name for the Host AP
			HOSTAPSSID='WLANderlust_'`shuf -i 1000-9999 -n 1`
		fi

		echo
		echo
		echo 'Available interfaces for your Host Access Point'
		mapfile -t WLANINTERFACES < <(ifconfig -a | sed -n 's|^\(wlan[0-9]*\):.*|\1|p')
		CHOICE=''
		for I in ${!WLANINTERFACES[@]}; do
			WLANINTERFACE=${WLANINTERFACES[$I]}
			printf '%2d %s\n' "$I" "$WLANINTERFACE"
			if [ "${WLANINTERFACES[$I]}" == "$HOSTAPINTERFACE" ]; then
				CHOICE="$I"
			fi
		done
		while true; do
			read -p 'Select the interface you would like to use: ' -e -i "$CHOICE" 'CHOICE'
			echo -n "$CHOICE" | egrep -q "^[0-9]+$" && [ -n "${WLANINTERFACES[$CHOICE]}" ] && break
		done
		HOSTAPINTERFACE="${WLANINTERFACES[$CHOICE]}"
		HOSTAPMACADDRESS=`ifconfig "$HOSTAPINTERFACE" | sed -n 's|^\s*ether\s*\(\S*\).*$|\1|p'`
		if [ -f "/etc/network/interfaces.d/$HOSTAPINTERFACE" ]; then
			HOSTAPIPADDRESS=`sed -n 's|^\s*address\s*\(\S*\).*$|\1|p' "/etc/network/interfaces.d/$HOSTAPINTERFACE"`
			HOSTAPNETMASK=`sed -n 's|^\s*netmask\s*\(\S*\).*$|\1|p' "/etc/network/interfaces.d/$HOSTAPINTERFACE"`
			HOSTAPNETWORK=`sed -n 's|^\s*network\s*\(\S*\).*$|\1|p' "/etc/network/interfaces.d/$HOSTAPINTERFACE"`
			HOSTAPBROADCAST=`sed -n 's|^\s*broadcast\s*\(\S*\).*$|\1|p' "/etc/network/interfaces.d/$HOSTAPINTERFACE"`
			HOSTAPNETWORKOCTET=`sed -n 's|^[0-9]*\.[0-9]*\.\([0-9]*\)\.[0-9]*$|\1|p' <<< "$HOSTAPIPADDRESS"`
			HOSTAPWPACONF=`sed -n 's|^\s*wpa-conf\s*\(\S*\).*$|\1|p' "/etc/network/interfaces.d/$HOSTAPINTERFACE"`
		#ToDo elif grep -q "^interface $HOSTAPINTERFACE" /etc/dhcpcd.conf; then
		#ToDo elif grep -q "^denyinterfaces $HOSTAPINTERFACE" /etc/dhcpcd.conf; then
		else
			# We take a number between 128 and 254 to create an IP range for the accesspoint
			HOSTAPNETWORKOCTET=`shuf -i 128-254 -n 1`
			HOSTAPIPADDRESS="192.168.$HOSTAPNETWORKOCTET.1"
			HOSTAPNETMASK='255.255.255.0'
			HOSTAPNETWORK="192.168.$HOSTAPNETWORKOCTET.0"
			HOSTAPBROADCAST="192.168.$HOSTAPNETWORKOCTET.255"
			HOSTAPWPACONF="/etc/wpa_supplicant/wpa_supplicant-$HOSTAPINTERFACE.conf"
		fi
		if [ "$HOSTAPMETHOD" == "wpa_supplicant" ] && [ -n "$HOSTAPWPACONF" ] && [ -e "$HOSTAPWPACONF" ]; then
			HOSTAPSSID=`sed -n 's|\s*ssid="\(.*\)"$|\1|p' "$HOSTAPWPACONF"`
			HOSTAPPASSPHRASE=`sed -n 's|\s*psk="\(.*\)"$|\1|p' "$HOSTAPWPACONF"`
		fi
		read -p 'SSID: ' -e -i "$HOSTAPSSID" 'HOSTAPSSID'
		#ToDo Check SSID length, max 32 characters
		while true; do
			read -p "WPA Passphrase: " -e -i "$HOSTAPPASSPHRASE" 'HOSTAPPASSPHRASE'
			# Check passphrase length, 8 to 63 charactrs
			echo -n "$HOSTAPPASSPHRASE" | egrep -q "^.{8,}$" && break
		done

		echo -n -e "
Host Access Point configuration summary
Interface: $HOSTAPINTERFACE
MAC Address: $HOSTAPMACADDRESS
IP Address: $HOSTAPIPADDRESS
Netmask: $HOSTAPNETMASK
Broadcast: $HOSTAPBROADCAST
SSID: $HOSTAPSSID
WPA Passphrase: $HOSTAPPASSPHRASE
\e[1mPress Q to quit, S to skip or any other key to use these settings\e[0m "
		read -n 1 -s 'CHOICE'
		([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit
	fi

	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		if [ "$HOSTAPMETHOD" == 'hostapd' ] && [ ! -f /usr/sbin/hostapd ]; then
			echo
			echo 'Installing required packages for your Host Access Point'
			apt-get install -y hostapd
			systemctl stop hostapd
		fi

		echo
		echo 'Configuring Host Access Point...'
		# Configure /etc/network/interfaces.d/HOSTAPINTERFACE
		if [ ! -f "/etc/network/interfaces.d/$HOSTAPINTERFACE" ]; then
			cat << EOF > "/etc/network/interfaces.d/$HOSTAPINTERFACE"
allow-hotplug $HOSTAPINTERFACE
iface $HOSTAPINTERFACE inet static
	address $HOSTAPIPADDRESS
	netmask $HOSTAPNETMASK
	network $HOSTAPNETWORK
	broadcast $HOSTAPBROADCAST
EOF
			if [ "$HOSTAPMETHOD" == 'wpa_supplicant' ]; then
				echo -e "\twpa-conf $HOSTAPWPACONF" >> "/etc/network/interfaces.d/$HOSTAPINTERFACE"
			fi
		fi

		# Configure /etc/dhcpcd.conf
		if ! grep -q "^interface $HOSTAPINTERFACE" /etc/dhcpcd.conf && ! grep -q "^denyinterfaces $HOSTAPINTERFACE" /etc/dhcpcd.conf; then
			backupFile /etc/dhcpcd.conf
			echo -e "\ndenyinterfaces $HOSTAPINTERFACE" >> /etc/dhcpcd.conf
		fi

		if ! grep -q "^$HOSTAPIPADDRESS\s" /etc/hosts; then
			backupFile /etc/hosts
			echo "$HOSTAPIPADDRESS	wlanderlust.local" >> /etc/hosts
		fi

		# dnsmasq
		if ! grep -q "^interface=$HOSTAPINTERFACE" /etc/dnsmasq.conf; then
			backupFile /etc/dnsmasq.conf
			cat << EOF >> /etc/dnsmasq.conf

interface=$HOSTAPINTERFACE
  dhcp-range=192.168.$HOSTAPNETWORKOCTET.20,192.168.$HOSTAPNETWORKOCTET.254,255.255.255.0,24h
EOF
		fi

		# /etc/avahi/avahi-daemon.conf 
		if grep -q "^#allow-interfaces=" /etc/avahi/avahi-daemon.conf; then
			backupFile /etc/avahi/avahi-daemon.conf
			sed "s|^#\?allow-interfaces=.*$|allow-interfaces=$HOSTAPINTERFACE|g" -i /etc/avahi/avahi-daemon.conf
		elif ! grep -q "^allow-interfaces=.*$HOSTAPINTERFACE.*" /etc/avahi/avahi-daemon.conf; then
			backupFile /etc/avahi/avahi-daemon.conf
			sed "s|^allow-interfaces=\(.*\)$|allow-interfaces=\1, $HOSTAPINTERFACE|g" -i /etc/avahi/avahi-daemon.conf
		fi
		systemctl restart avahi-daemon

		HOSTAPHASCHANGED='false'
		if [ "$HOSTAPMETHOD" == 'hostapd' ]; then
			# hostapd
			if [ -s /etc/hostapd/hostapd.conf ]; then
				HOSTAPDCONF=`sed "s|^interface=.*$|interface=$HOSTAPINTERFACE|;s|^ssid=.*$|ssid=$HOSTAPSSID|;s|^wpa_passphrase=.*$|wpa_passphrase=$HOSTAPPASSPHRASE|" /etc/hostapd/hostapd.conf`
			else
				HOSTAPDCONF="interface=$HOSTAPINTERFACE
driver=nl80211
ssid=$HOSTAPSSID
hw_mode=g
channel=6
wmm_enabled=0
macaddr_acl=0
auth_algs=1
ignore_broadcast_ssid=0
wpa=2
wpa_passphrase=$HOSTAPPASSPHRASE
wpa_key_mgmt=WPA-PSK
wpa_pairwise=TKIP
rsn_pairwise=CCMP
ctrl_interface=/var/run/hostapd
ctrl_interface_group=0"
			fi

			# Check if HOSTAPDCONF and /etc/hostapd/hostapd.conf differ
			if [ ! -e /etc/hostapd/hostapd.conf ] || ! ( echo "$HOSTAPDCONF" | diff -q /etc/hostapd/hostapd.conf - > /dev/null ); then
				backupFile /etc/hostapd/hostapd.conf
				echo "$HOSTAPDCONF" > /etc/hostapd/hostapd.conf
				chmod 600 /etc/hostapd/hostapd.conf
				HOSTAPHASCHANGED='true'
			fi

			# /etc/default/hostapd
			backupFile /etc/default/hostapd
			sed 's|^#\?DAEMON_CONF=.*$|DAEMON_CONF="/etc/hostapd/hostapd.conf"|' -i /etc/default/hostapd
		elif [ "$HOSTAPMETHOD" == 'wpa_supplicant' ]; then
			#wpa_supplicant
			if [ -s "$HOSTAPWPACONF" ]; then
				WPASUPPLICANTCONF=`sed "s|ssid=.*|ssid=\"$HOSTAPSSID\"|;s|psk=.*|psk=\"$HOSTAPPASSPHRASE\"|" "$HOSTAPWPACONF"`
			else
				WPASUPPLICANTCONF="ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=US

network={
	ssid=\"$HOSTAPSSID\"
	mode=2
	key_mgmt=WPA-PSK
	psk=\"$HOSTAPPASSPHRASE\"
	frequency=2437
}"
			fi

			# Check if WPASUPPLICANTCONF and /etc/wpa_supplicant/wpa_supplicant.conf differ
			if [ ! -e "$HOSTAPWPACONF" ] || ! ( echo "$WPASUPPLICANTCONF" | diff -q "$HOSTAPWPACONF" - > /dev/null ); then
				backupFile "$HOSTAPWPACONF"
				echo "$WPASUPPLICANTCONF" > "$HOSTAPWPACONF"
				chmod 600 "$HOSTAPWPACONF"
				HOSTAPHASCHANGED='true'
			fi
		fi

		if [ "$HOSTAPMETHOD" == 'hostapd' ]; then
			systemctl unmask hostapd
			systemctl enable hostapd
		fi

		if $HOSTAPHASCHANGED && $ISREMOTELOGIN; then
			echo
			# Just wait a bit to show the result
			sleep 5

			clear
			echo -n -e "\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Host Access Point configuration

Your Access Point is now configured. You need to restart your Rasperry Pi and
continue the installation by executing the installation script again. The
script will recognise where it has stopped and continue with the next step.

Reconnect to your WLANderlust Access Point using the following credentials:
SSID: $HOSTAPSSID
Passphrase: $HOSTAPPASSPHRASE
URL: pi@wlanderlust.local or pi@$HOSTAPIPADDRESS
\e[1mPress Q to quit or any other key to restart your device\e[0m "
			read -n 1 -s 'CHOICE'
			([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit

			INSTALLATIONSTATE='wpa_supplicant'
			echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
			reboot & exit
		elif $HOSTAPHASCHANGED; then
			# Restart Host AP interface
			#RS I have not tested this as I always connect remotely
			ifdown "$HOSTAPINTERFACE"
			ifup "$HOSTAPINTERFACE"

			if [ "$HOSTAPMETHOD" == 'hostapd' ]; then
				systemctl start hostapd
			elif [ "$HOSTAPMETHOD" == 'wpa_supplicant' ]; then
				systemctl disable wpa_supplicant.service
				systemctl enable wpa_supplicant@$HOSTAPINTERFACE.service
			fi

			systemctl restart dnsmasq

			echo
			# Just wait a bit to show the result
			sleep 5
		fi
	fi

	INSTALLATIONSTATE='wpa_supplicant'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

# Proxy configuration
if [ "$INSTALLATIONSTATE" == 'proxy' ]; then
	clear
	echo -n -e "\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Proxy configuration

We're now going to configure your device as a Transparent Proxy

\e[1mPress Q to quit, S to skip or any other key to configure the Host Access Point\e[0m "
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit

	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		if [ ! -f /usr/sbin/squid ]; then
			echo
			echo 'Installing required packages for your Transparent Proxy'
			apt-get install -y squid3
			#ToDo? systemctl stop squid
		fi
	fi
fi

if [ "$INSTALLATIONSTATE" == 'wpa_supplicant' ]; then
	clear
	if $ISREMOTELOGIN; then
		echo -n -e "\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
WiFi Roaming configuration

Welcome back! We're now going to configure your device to connect to other
Access Points

We're going to detect the WiFi interface you want to use to connect to other
Access Points.

\e[1mPress Q to quit, S to skip or any other key to configure WiFi roaming\e[0m "
	else
		echo -n -e "\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
WiFi Roaming configuration

Your Host Access Point is now configured. We're now going to configure your device to
connect to other Access Points.

\e[1mPress Q to quit, S to skip or any other key to configure WiFi roaming\e[0m "
	fi
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit

	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		if [ -f /etc/hostapd/hostapd.conf ]; then
			HOSTAPINTERFACE=`cat /etc/hostapd/hostapd.conf | sed -n 's|^interface=\(.*\)$|\1|p'`
		fi

		echo
		echo
		echo 'Available interfaces for'
		mapfile -t WLANINTERFACES < <(ifconfig -a | sed -n 's|^\(wlan[0-9]*\):.*|\1|p' | sed "/$HOSTAPINTERFACE/d")
		CHOICE=''
		for I in ${!WLANINTERFACES[@]}; do
			WLANINTERFACE=${WLANINTERFACES[$I]}
			printf '%2d %s\n' "$I" "$WLANINTERFACE"
			if [ -f "/etc/network/interfaces.d/$WLANINTERFACE" ] && grep -q 'wpa_supplicant.conf' "/etc/network/interfaces.d/$WLANINTERFACE"; then
				CHOICE="$I"
			fi
		done
		while true; do
			read -p 'Select the interface you would like to use: ' -e -i "$CHOICE" 'CHOICE'
			echo -n "$CHOICE" | egrep -q "^[0-9]+$" && [ -n "${WLANINTERFACES[$CHOICE]}" ] && break
		done
		WLANDERLUSTINTERFACE="${WLANINTERFACES[$CHOICE]}"
		WLANDERLUSTMACADDRESS=`ifconfig "$WLANDERLUSTINTERFACE" | sed -n 's|^\s*ether\s*\(\S*\)\s*.*$|\1|p'`

		echo
		echo -n -e "WLANderlust configuration summary
Interface: $WLANDERLUSTINTERFACE
MAC Address: $WLANDERLUSTMACADDRESS
\e[1mPress Q to quit, S to skip or any other key to use these settings\e[0m "
		read -n 1 -s 'CHOICE'
		([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit
	fi

	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		echo "'$WLANDERLUSTINTERFACE'"
		ifdown --force "$WLANDERLUSTINTERFACE"

		# Add WLANderlust interface to /etc/udev/rules.d/10-network.rules
		#if ! grep -q "$WLANDERLUSTMACADDRESS" /etc/udev/rules.d/10-network.rules; then
		#	echo "KERNEL==\"wlan?\", ATTR{address}==\"$WLANDERLUSTMACADDRESS\", NAME=\"$WLANDERLUSTINTERFACE\"" >> /etc/udev/rules.d/10-network.rules
		#fi

		# Configure /etc/network/interfaces.d/WLANDERLUSTINTERFACE
		if [ ! -f "/etc/network/interfaces.d/$WLANDERLUSTINTERFACE" ]; then
			cat << EOF > "/etc/network/interfaces.d/$WLANDERLUSTINTERFACE"
allow-hotplug $WLANDERLUSTINTERFACE
iface $WLANDERLUSTINTERFACE inet manual
	wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
EOF
		fi

		if [ ! -f /etc/wpa_supplicant/wpa_supplicant.conf ]; then
			cat << EOF > /etc/wpa_supplicant/wpa_supplicant.conf
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=US

network={
	key_mgmt=NONE
	priority=-100
}
EOF

			chown --reference=/etc/wpa_supplicant/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf
			chmod --reference=/etc/wpa_supplicant/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf
		fi

		#if [ ! -f "/etc/wpa_supplicant/wpa_supplicant-$WLANDERLUSTINTERFACE.conf" ]; then
		#	ln -s wpa_supplicant.conf "/etc/wpa_supplicant/wpa_supplicant-$WLANDERLUSTINTERFACE.conf"
		#fi

		#ToDo /etc/dhcp/dhclient.conf

		ifup "$WLANDERLUSTINTERFACE"

		echo
		# Just wait a bit to show the result
		sleep 5
	fi

	INSTALLATIONSTATE='WLANderlust'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

if [ "$INSTALLATIONSTATE" == 'WLANderlust' ] || [ "$INSTALLATIONSTATE" == 'update' ]; then
	clear
	echo -n -e "\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
WLANderlust installation

Your device is now configured to connect to open Access Points.

Now it's finally time to install the WLANderlust scripts

\e[1mPress Q to quit, S to skip or any other key to install WLANderlust\e[0m "
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit

	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		echo
		echo
		echo 'Installing required packages for WLANderlust'

		# Stop of WLANderlust
		systemctl start WLANderlust

		apt-get install -y python3-pip
		pip3 install pycurl
		pip3 install bottle
		pip3 install gps
		pip3 install netifaces
		pip3 install beautifulsoup4
		WIFI_INSTALL_CLI=False pip3 install wifi

		#apt-get install bluetooth bluez libbluetooth-dev
		#pip3 install pybluez

		echo
		echo
		echo 'Installing WLANderlust'
		DIR='/usr/local/lib/WLANderlust/web'
		[ ! -d "$DIR" ] && mkdir -p "$DIR" && echo -n '.'
		#DIR='/usr/local/lib/WLANderlust/captiveportal.d/'
		#[ ! -d "$DIR" ] && mkdir -p "$DIR" && echo -n '.'
		#DIR='/usr/local/lib/WLANderlust/vpn.d/'
		#[ ! -d "$DIR" ] && mkdir -p "$DIR" && echo -n '.'
		#DIR='/usr/local/lib/WLANderlust/firewall.d/'
		#[ ! -d "$DIR" ] && mkdir -p "$DIR" && echo -n '.'
		#DIR='/usr/local/lib/WLANderlust/plugin.d/'
		#[ ! -d "$DIR" ] && mkdir -p "$DIR" && echo -n '.'
		find usr/local/lib/WLANderlust/web -type f -print0 | while IFS= read -r -d '' FILE; do
			if [ ! -f "/$FILE" ] || ! diff -q "$FILE" "/$FILE" > /dev/null; then
				echo "Installing /$FILE"
				cp --preserve=mode,timestamps "$FILE" "/$FILE"
			fi
		done
		find /usr/local/lib/WLANderlust/web -type f -print0 | while IFS= read -r -d '' FILE; do
			if [ ! -f ".$FILE" ] && grep -q "^# WLANderlust" "$FILE"; then
				echo "Removing $FILE"
				rm "$FILE"
			fi
		done

		#FILE='usr/local/bin/WLANderlust'
		#if [ ! -f "/$FILE" ] || ! diff -q "$FILE" "/$FILE" > /dev/null; then
		#	echo "Installing /$FILE"
		#	cp --preserve=mode,timestamps "$FILE" "/$FILE"
		#fi
		#echo

		FILE='etc/systemd/system/WLANderlust.service'
		if [ ! -f "/$FILE" ] || ! diff -q "$FILE" "/$FILE" > /dev/null; then
			echo "Installing /$FILE"
			cp --preserve=mode,timestamps "$FILE" "/$FILE"
		fi
		echo

		FILE='usr/local/sbin/WLANderlustd'
		if [ ! -f "/$FILE" ] || ! diff -q "$FILE" "/$FILE" > /dev/null; then
			echo "Installing /$FILE"
			cp --preserve=mode,timestamps "$FILE" "/$FILE"
		fi
		echo

		# Copy newer versions of the DHCP hooks
		#echo 'Installing DHCP client hooks'
		#find etc/dhcp/dhclient-*-hooks.d/ -type f -name '[0-9][0-9]-*' -print0 | while IFS= read -r -d '' FILE; do
		#	if [ ! -f "/$FILE" ] || ! diff -q "$FILE" "/$FILE" > /dev/null; then
		#		echo "Installing /$FILE"
		#		cp --preserve=mode,timestamps "$FILE" "/$FILE"
		#	fi
		#done
		#find lib/dhcpcd/dhcpcd-hooks/ -type f -name '[0-9][0-9]-*' -print0 | while IFS= read -r -d '' FILE; do
		#	if [ ! -f "/$FILE" ] || ! diff -q "$FILE" "/$FILE" > /dev/null; then
		#		echo "Installing /$FILE"
		#		cp --preserve=mode,timestamps "$FILE" "/$FILE"
		#	fi
		#done

		# Remove old DHCP hooks
		#find /etc/dhcp/dhclient-*-hooks.d/ -type f -name '[0-9][0-9]-*' -print0 | while IFS= read -r -d '' FILE; do
		#	if [ ! -f ".$FILE" ] && grep -q "^# WLANderlust" "$FILE"; then
		#		echo "Removing $FILE"
		#		rm "$FILE"
		#	fi
		#done
		#find /lib/dhcpcd/dhcpcd-hooks/ -type f -name '[0-9][0-9]-*' -print0 | while IFS= read -r -d '' FILE; do
		#	if [ ! -f ".$FILE" ] && grep -q "^# WLANderlust" "$FILE"; then
		#		echo "Removing $FILE"
		#		rm "$FILE"
		#	fi
		#done

		echo
		# Just wait a bit to show the result
		sleep 5
	fi

	[ "$INSTALLATIONSTATE" == 'update' ] &&
		INSTALLATIONSTATE='finished installation' ||
		INSTALLATIONSTATE='adduser'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

# Add WLANderlust user with same password as pi
if [ "$INSTALLATIONSTATE" == 'adduser' ]; then
	clear
	echo -n -e '\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Add WLANderlust user

ToDo

\e[1mPress Q to quit, S to skip or any other key to update your Raspbian installation\e[0m '
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" == 'q' ] || [ "$CHOICE" == 'Q' ]) && echo && exit

	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		echo
		echo
		if ! grep -q '^wlanderlust:' /etc/passwd; then
			echo 'Creating user wlanderlust'
			adduser --disabled-password --gecos '' wlanderlust
			# Change password to pi's one
			PIPASSWD=`sed -n 's|^pi:\([^:]*\):.*$|\1|p' /etc/shadow`
			sed "s|^\(wlanderlust:\)[^:]*\(:.*\)$|\1$PIPASSWD\2|" -i /etc/shadow
		fi

		if [ ! -s ~pi/.ssh/authorized_keys ]; then
			echo 'Installing SSH authorized keys for wlanderlust user'
			mkdir -p ~wlanderlust/.ssh
			cp ~pi/.ssh/authorized_keys ~wlanderlust/.ssh/
			chown -R wlanderlust:wlanderlust ~wlanderlust/.ssh
		fi

		if ! grep -q 'WLANderlust' ~wlanderlust/.profile; then
			echo 'Auto start WLANderlust for wlanderlust user'
			echo -e '\nsudo /usr/local/bin/WLANderlust; exit' >> ~wlanderlust/.profile
		fi

		if [ ! -f /etc/sudoers.d/wlanderlust ]; then
			echo 'wlanderlust ALL=(ALL) NOPASSWD: /usr/local/bin/WLANderlust' > /etc/sudoers.d/wlanderlust
			chown --reference=/etc/sudoers /etc/sudoers.d/wlanderlust
			chmod --reference=/etc/sudoers /etc/sudoers.d/wlanderlust
		fi

		echo
		# Just wait a bit to show the result
		sleep 5
	fi

	INSTALLATIONSTATE='finished installation'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

clear
echo -e '\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Success!

Congratulations, WLANderlust is now successfully installed!'

#ToDo Create first connection
